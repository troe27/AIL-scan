configfile: "config/config_f4.yaml"
import os
import numpy as np

wild = list()
wild1, = glob_wildcards(os.path.join(config["Raw_Folder"], "{sample}_R2_001.fastq.gz"))
#print(wild1)
# In case we only have the bam for some individuals
wild2, = glob_wildcards(os.path.join(config["Data_Folder"], "{sample}.bam"))
#print(wild2)
wild = list(set(wild1 + wild2))
wild = [sample for sample in wild if not sample.endswith("_call2")]
#print(wild)
ruleorder: transform > call


rule all:
    input:
        expand(os.path.join(config["Data_Folder"], "{sample}.cleaned.vcf.bgz.tbi"), sample=wild)


# BWA
rule index:
    input:
        config["reference"]
    output:
        config["reference"] + ".bwt"
    conda:
        "env/env.yaml"
    shell:
        "bwa index {input}"


rule map:
    input:
        forw = os.path.join(config["Raw_Folder"], "{sample}_R1_001.fastq.gz"),
        reve = os.path.join(config["Raw_Folder"], "{sample}_R2_001.fastq.gz"),
        ref = config["reference"],
        index = config["reference"] + ".bwt"
    output:
        temp(os.path.join(config["Data_Folder"], "{sample}.bam"))
    threads:
        4
    conda:
        "env/env.yaml"
    shell:
        "bwa mem -t {threads} {input.ref} {input.forw} {input.reve} | samtools sort -@{threads} -O BAM -o {output} "


rule cleanBam:
    input:
        "{file}.bam"
    output:
        temp("{file}_call2.bam")
    conda:
        "env/env.yaml"
    shell:
        "samtools view -bh -q30 -f 0x02 {input} > {output}"

# Samtools mpileup (for the complete file and subsamples)
rule call:
    input:
        mapping = os.path.join(config["Data_Folder"], "{sample}_call2.bam"),
        ref = config["reference"],
    output:
        temp(os.path.join(config["Data_Folder"], "{sample}.vcf.gz"))
    priority:
        50
    params:
        bcftools = config["bcftools"]
    conda:
        "env/env.yaml"
    shell:
        "{params.bcftools} mpileup --skip-indels  -Oz -f {input.ref} {input.mapping} -o {output}"


# Transform in proper VCF (see  /home/thibaut/Gallus/Projects/F2-simul/Scripts/v0.1/Subsample/test.vcf.gz for example)
rule transform:
    priority:
        100
    input:
        rules.call.output
    output:
        protected(os.path.join(config["Data_Folder"], "{sample}.cleaned.vcf.bgz"))
    conda:
        "env/env.yaml"
    script:
        "scripts/Call/addGenotypeVcf.py"


# tabix
rule tabix:
    input:
        "{sample}.cleaned.vcf.bgz"
    output:
        "{sample}.cleaned.vcf.bgz.tbi"
    conda:
        "env/env.yaml"
    shell:
        "tabix -p vcf {input}"
